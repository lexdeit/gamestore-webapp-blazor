@page "/editgame"
@page "/editgame/{id:int}"
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient
@rendermode InteractiveServer

<PageTitle>@title</PageTitle>

<h1 class="mt-5">@title</h1>

<section class="mt-5">


    @if (genres is null || game is null)
    {
        <p>
            <em>
                Cargando...
            </em>
        </p>
    }
    else
    {

        <div class="row">
            <div class="col-md-4">


                <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">

                        <label for="name" class="form-label">Name</label>

                        <InputText id="name" class="form-control" @bind-Value="game.Name" />

                        <ValidationMessage For="() => game.Name" />

                    </div>

                    <div class="mb-3">

                        <label for="genre" class="form-label">Genre</label>

                        <InputSelect id="genre" class="form-select" @bind-Value="game.GenreId">
                            <option value="">Select a genre</option>

                            @foreach (var genre in genres)
                            {
                                <option value="@genre.Id">@genre.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => game.GenreId" />


                    </div>

                    <div class="mb-3">

                        <label for="price" class="form-label">Price</label>

                        <InputNumber id="price" class="form-control" @bind-Value="game.Price" />

                        <ValidationMessage For="() => game.Price" />


                    </div>

                    <div class="mb-3">

                        <label for="releaseDate" class="form-label">Release Date</label>

                        <InputDate id="releaseDate" class="form-select" @bind-Value="game.ReleaseDate" />

                    </div>


                    <button type="submit" class="btn btn-primary">Submit</button>

                    <a role="button" class="btn btn-danger" href="/">Cancel</a>
                </EditForm>

            </div>
        </div>
    }
</section>

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private GameDetails? game { get; set; }


    private Genre[]? genres;

    private string title = string.Empty;


    protected override async Task OnParametersSetAsync()
    {

        if (game is not null)
        {
            return;
        }

        if (Id is not null)
        {
            game = await GamesClient.GetGameAsync(Id.Value);
            title = $"Edit {game.Name}";
        }
        else
        {
            game = new()
                {
                    Name = string.Empty,
                    ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
                };

            title = "New Game";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genres = await GenresClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {

        ArgumentNullException.ThrowIfNull(game);

        if (Id is null)
        {
            await GamesClient.AddGameAsync(game);
        }
        else
        {
            game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(game);
        }

        NavigationManager.NavigateTo("/");
    }
}